<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/05/19/%E5%BF%8D%E7%97%9B%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E6%A0%87%E7%AD%BE%E9%A1%B5%E6%8F%92%E4%BB%B6/"/>
    <url>/2024/05/19/%E5%BF%8D%E7%97%9B%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E6%A0%87%E7%AD%BE%E9%A1%B5%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>如果你想要一个自定义收藏页面的标签页插件，他没有广告，而且支持很多插件，如股票、时间、倒计时、备忘录，那么我必须推荐你一个插件了。</p><p>itab 标签页。</p><p><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405131938405.png" alt="微信截图_20240513193649.png"></p><p>标签页可以分组，可以自定义图标，很多都能自动识别 logo。这类产品很多，但是完成度最高的目前就是 itab，不是广告，纯粹自来水。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/05/19/%E5%BE%85%E5%86%99%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    <url>/2024/05/19/%E5%BE%85%E5%86%99%E7%9A%84%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="油猴插件之文库下载器"><a href="#油猴插件之文库下载器" class="headerlink" title="油猴插件之文库下载器"></a>油猴插件之文库下载器</h3><ol><li>是篡改猴的文库下载器。</li></ol><h3 id="图片识别公式神器"><a href="#图片识别公式神器" class="headerlink" title="图片识别公式神器"></a>图片识别公式神器</h3><ol><li>公式识别网站<br><a href="https://mathpix.com/">Mathpix: AI-powered document automation</a></li></ol><h3 id="Win-11-安卓子系统"><a href="#Win-11-安卓子系统" class="headerlink" title="Win 11 安卓子系统"></a>Win 11 安卓子系统</h3><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><h2 id="学习-dataview"><a href="#学习-dataview" class="headerlink" title="学习 dataview"></a>学习 dataview</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>prophet时间序列模型水质预测应用</title>
    <link href="/2024/05/19/prophet%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B%E6%B0%B4%E8%B4%A8%E9%A2%84%E6%B5%8B%E5%BA%94%E7%94%A8/"/>
    <url>/2024/05/19/prophet%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B%E6%B0%B4%E8%B4%A8%E9%A2%84%E6%B5%8B%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405131916648.jpg" alt="pexels-neosiam-580871.jpg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此前已经分析了，ARIMA 模型在水质预测中的应用，今天用 prophet 模型测试下再水质预测中的效果。</p><h2 id="Prophet-简介"><a href="#Prophet-简介" class="headerlink" title="Prophet 简介"></a>Prophet 简介</h2><p>Prophet 是 Facebook 于2017年开源的一个时间序列预测框架，特别适合于处理具有明显趋势性和季节性的数据。该模型设计初衷是为了让非专业的数据科学家也能轻松上手进行复杂的时间序列分析，同时也能满足专业人士对于模型灵活性和准确性的需求，总之，就很香。</p><h2 id="Prophet-模型特点"><a href="#Prophet-模型特点" class="headerlink" title="Prophet 模型特点"></a>Prophet 模型特点</h2><p><strong>易用性</strong>：Prophet 提供了一个高度封装的 API，用户只需要提供时间戳（ds，通常为日期）和观测值（y，即随时间变化的目标变量），就可以快速构建预测模型，而无需深入理解复杂的统计或机器学习理论。<br><strong>自动特征提取</strong>：模型自动识别并处理时间序列中的趋势（长期增长或下降）、季节性（如周、月、年等周期性模式）以及节假日效应。用户可以轻松地添加自定义的季节性模式和节假日信息。<br><strong>灵活性</strong>：模型允许用户调整多种参数来控制预测的行为，比如趋势的平滑程度、季节性模式的复杂度等，以适应不同数据的特点。<br><strong>异常值和缺失值处理</strong>：Prophet模型对于数据中的异常值和缺失值具有一定的鲁棒性，能够在不影响整体预测的情况下处理这些问题。<br><strong>changepoints</strong>：模型能够自动检测并适应时间序列中的变化点，即数据中的非平稳部分，这对于预测具有突然变化的时间序列尤为重要。<br><strong>可视化</strong>：Prophet还提供了丰富的可视化工具，帮助用户直观地理解模型的各个组成部分（如趋势、季节性）以及预测结果，便于模型诊断和结果解释。<br><strong>Python 和 R 支持</strong>：Prophet 在 Python 和 R 两种语言中都有实现，方便不同背景的用户使用。</p><p>从上面的特点看出，完美适配水质预测。</p><h2 id="Prophet-python-安装"><a href="#Prophet-python-安装" class="headerlink" title="Prophet python 安装"></a>Prophet python 安装</h2><p>在网上能看到很多奇奇怪怪的安装指令，比如 fbprophet 库，已经不能用了，以我为准哈，下面是最新可用的安装方法。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip install prophet<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405131841729.png" alt="image.png"></p><h2 id="Python-Prophet-实践"><a href="#Python-Prophet-实践" class="headerlink" title="Python Prophet 实践"></a>Python Prophet 实践</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd  <br><span class="hljs-keyword">from</span> prophet <span class="hljs-keyword">import</span> Prophet  <br><span class="hljs-keyword">from</span> prophet.plot <span class="hljs-keyword">import</span> add_changepoints_to_plot  <br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np  <br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br></code></pre></td></tr></table></figure><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><p>每个项目的数据准备不一样，可以是在线数据，也可以是本地数据，具体略过。<br>数据结构为时间和值，Prophet 格式形式为 ds 和 y。</p><h3 id="数据粒径和数据集尺寸"><a href="#数据粒径和数据集尺寸" class="headerlink" title="数据粒径和数据集尺寸"></a>数据粒径和数据集尺寸</h3><p>Prophet 非常适合做周期数据，也适应多种粒径，所以无需担心他无法识别小时或者日的尺度，<br>还有因为他适合做周期数据，因此给数据集时，应给他至少一个周期的数据，不然预测出来效果差很多。<br>比如同一个站点，同一个因子，给一个月的数据集和一年的数据集结果分别如下图所示：<br><strong>一个月的数据集预测结果</strong><br><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405131854796.png" alt="Figure_5.png"><br><strong>一年的数据结果</strong><br><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405131855235.png" alt="Figure_2.png"></p><p>由上面 2 个图可以看出，完全是天差地别，也能看出这个模型非常厉害，处理周期波动数据非常精准，在一年的尺度下准确的预测了 4 月后水质将继续升高，并没有被短期下降数据而干扰。</p><h2 id="原始数据集预览"><a href="#原始数据集预览" class="headerlink" title="原始数据集预览"></a>原始数据集预览</h2><p>综上，我们选择一年的数据集，开始预测。原始数据如下：<br><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405131858976.png"><br>可以看到数据集质量一般，这也是实际生成环境中的数据，但是 Prophet 能够识别异常值，不用担心他会报错。</p><h2 id="模型搭建预览结果"><a href="#模型搭建预览结果" class="headerlink" title="模型搭建预览结果"></a>模型搭建预览结果</h2><p>模型接口非常简单，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 初始化Prophet模型  </span><br>model = Prophet()  <br><span class="hljs-comment"># 拟合模型  </span><br>model.fit(df)  <br><span class="hljs-comment"># 定义未来预测的时间段，例如预测未来7天的水质  </span><br>future = model.make_future_dataframe(periods=<span class="hljs-number">7</span>)  <span class="hljs-comment"># 7天预测期  </span><br>future.tail()  <span class="hljs-comment"># 查看预测数据框的末尾几行以确认预测时间段  </span><br><span class="hljs-comment"># 进行预测  </span><br>forecast = model.predict(future)  <br><span class="hljs-comment"># 绘制预测结果  </span><br>fig1 = model.plot(forecast)  <br>plt.title(<span class="hljs-string">&#x27;Water Quality Prediction&#x27;</span>)  <br>plt.show()  <br><span class="hljs-comment"># 添加变化点到图表中（如果需要）  </span><br>fig2 = model.plot(forecast)  <br>ax = fig2.gca()  <br>add_changepoints_to_plot(ax, model, forecast)  <br>plt.title(<span class="hljs-string">&#x27;Water Quality Prediction with Changepoints&#x27;</span>)  <br>plt.show()  <br><span class="hljs-comment"># 打印预测数据框查看预测详情  </span><br><span class="hljs-built_in">print</span>(forecast[[<span class="hljs-string">&#x27;ds&#x27;</span>, <span class="hljs-string">&#x27;yhat&#x27;</span>, <span class="hljs-string">&#x27;yhat_lower&#x27;</span>, <span class="hljs-string">&#x27;yhat_upper&#x27;</span>]])<br></code></pre></td></tr></table></figure><p>预测结果为图 2 所示，变化点如下图，模型将每次突变点都标记出来了。<br><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405131902308.png" alt="Figure_3.png"></p><p>预测结果 forecast<br><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405131913145.png" alt="image.png"></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>相比 arima，Prophet 更加简单易用，且成熟接口更多，出图预览更方便，本文还没有对添加节假日进行测试，但已经非常够用了。<br>对比 LSTM，预测时间少非常多，配置也更简单，真的很不错，如果有兴趣可以深入尝试。<br><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405131915810.jpg" alt="pexels-pixabay-50677.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>微信公众号</tag>
      
      <tag>CSDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/05/19/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B%E6%B0%B4%E8%B4%A8%E9%A2%84%E6%B5%8B%E5%BA%94%E7%94%A8/"/>
    <url>/2024/05/19/ARIMA%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B%E6%B0%B4%E8%B4%A8%E9%A2%84%E6%B5%8B%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>#水质模型 #时间序列 #python应用</p><h2 id="ARIMA-时间序列模型简介"><a href="#ARIMA-时间序列模型简介" class="headerlink" title="ARIMA 时间序列模型简介"></a>ARIMA 时间序列模型简介</h2><p>时间序列是研究数据随时间变化而变化的一种算法，是一种预测性分析算法。它的基本出发点就是事物发展都有连续性，按照它本身固有的规律进行。ARIMA(p,d,q)模型全称为差分自回归移动平均模型  (Autoregressive Integrated Moving Average Model,简记 ARIMA). 是比较成熟且简单的时间预测模型之一。其中 AR 为自回归, I 为差分, MA 为移动平均。<br>趋势参数：</p><ul><li>p：趋势自回归阶数。</li><li>d：趋势差分阶数。</li><li>q：趋势移动平均阶数。</li></ul><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><p>差分（difference）又名差分函数或差分运算，差分的结果反映了离散量之间的一种变化，是研究离散数学的一种工具。它将原函数f(x) 映射到f(x+a)-f(x+b) 。差分运算，相应于微分运算，是微积分中重要的一个概念。总而言之，差分对应离散，微分对应连续。差分又分为前向差分、向后差分及中心差分三种。<br>通常情况下我们用到的是前向差分公式如下：<br>xk&#x3D;x0+kh,(k&#x3D;0,1,…,n)<br>△f(xk)&#x3D;f(xk+1)−f(xk)<br>差分的阶<br>称为阶的差分，即前向阶差分 ，如果数学运用根据数学归纳法，有其中，为二项式系数。特别的，有前向差分有时候也称作数列的二项式变换</p><h2 id="在高锰酸盐指数序列预测可行性的说明"><a href="#在高锰酸盐指数序列预测可行性的说明" class="headerlink" title="在高锰酸盐指数序列预测可行性的说明"></a>在高锰酸盐指数序列预测可行性的说明</h2><p>通过观察水质变化趋势，高锰酸盐指数波动不剧烈，存在明显的中心波动规律。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/681168/1658496447043-88b405af-1be8-4102-9e18-08920fc56b01.png"></p><h2 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python实现</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">import</span> warnings<br><span class="hljs-keyword">import</span> pymysql<br><br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>)  <br><span class="hljs-comment"># 忽略警告，不然一大堆警告，多是python及对应包升高导致，不影响使用</span><br><span class="hljs-keyword">from</span> IPython.core.interactiveshell <span class="hljs-keyword">import</span> InteractiveShell<br>InteractiveShell.ast_node_interactivity = <span class="hljs-string">&quot;all&quot;</span><br><span class="hljs-keyword">from</span> matplotlib.pylab <span class="hljs-keyword">import</span> style  <span class="hljs-comment"># 自定义图表风格</span><br>style.use(<span class="hljs-string">&#x27;ggplot&#x27;</span>)<br><br><span class="hljs-comment"># 解决中文乱码问题</span><br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Simhei&#x27;</span>]<br><span class="hljs-comment"># 解决坐标轴刻度负号乱码</span><br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># pip install statsmodels</span><br><br><span class="hljs-keyword">from</span> statsmodels.graphics.tsaplots <span class="hljs-keyword">import</span> plot_acf, plot_pacf  <span class="hljs-comment"># 自相关图、偏自相关图</span><br><span class="hljs-keyword">from</span> statsmodels.tsa.stattools <span class="hljs-keyword">import</span> adfuller <span class="hljs-keyword">as</span> ADF  <span class="hljs-comment"># 平稳性检验</span><br><span class="hljs-keyword">from</span> statsmodels.stats.diagnostic <span class="hljs-keyword">import</span> acorr_ljungbox  <span class="hljs-comment"># 白噪声检验</span><br><span class="hljs-keyword">import</span> statsmodels.api <span class="hljs-keyword">as</span> sm  <span class="hljs-comment"># D-W检验,一阶自相关检验</span><br><span class="hljs-keyword">from</span> statsmodels.graphics.api <span class="hljs-keyword">import</span> qqplot  <span class="hljs-comment"># 画QQ图,检验一组数据是否服从正态分布</span><br><span class="hljs-keyword">from</span> statsmodels.tsa.arima.model <span class="hljs-keyword">import</span> ARIMA<br></code></pre></td></tr></table></figure><h3 id="连接数据"><a href="#连接数据" class="headerlink" title="连接数据"></a>连接数据</h3><p>通过数据库，excel 都可以，列名为监测时间、设备名称、设备因子、监测值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">conn_sql</span>():<br>    conn = pymysql.connect(host=<span class="hljs-string">&quot; &quot;</span>,<br>                   port= ,<br>                   user=<span class="hljs-string">&quot; &quot;</span>,<br>                   password=<span class="hljs-string">&quot; &quot;</span>,<br>                   db=<span class="hljs-string">&quot; &quot;</span>,<br>                   charset=<span class="hljs-string">&quot;utf8&quot;</span>)<br>    sql = <span class="hljs-string">&quot;&quot;</span><br>    read_sql = pd.read_sql(sql, conn)<br>    <span class="hljs-keyword">return</span> read_sql<br>read_sql=conn_sql()<br></code></pre></td></tr></table></figure><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">nseri</span>(<span class="hljs-params">s,y </span>):<br>    aidunqiao = read_sql.loc[read_sql[<span class="hljs-string">&#x27;设备名称&#x27;</span>] == s, :]<br>    ai_cod = aidunqiao.loc[read_sql[<span class="hljs-string">&#x27;监测因子&#x27;</span>] == y, :]<br>    ai_cod_mn = ai_cod.loc[:, [<span class="hljs-string">&quot;监测时间&quot;</span>, <span class="hljs-string">&#x27;监测值&#x27;</span>]]<br>    baseline = ai_cod.loc[:, [<span class="hljs-string">&quot;监测时间&quot;</span>, <span class="hljs-string">&#x27;监测值&#x27;</span>]]<br><br>    ai_cod_mn.set_index(<span class="hljs-string">&#x27;监测时间&#x27;</span>, inplace=<span class="hljs-literal">True</span>)<br>    interp_cod_mn = ai_cod_mn[<span class="hljs-string">&quot;监测值&quot;</span>].interpolate()<br>    ai_cod_mn[<span class="hljs-string">&quot;cod&quot;</span>] = interp_cod_mn<br>    starttime = baseline.iloc[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>    rows = baseline.shape[<span class="hljs-number">0</span>]<br>    endtime = baseline.iloc[rows - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br><br>    year_month_day = pd.date_range(starttime, endtime, freq=<span class="hljs-string">&quot;h&quot;</span>).strftime(<span class="hljs-string">&quot;%Y%m%d%h%m%s&quot;</span>)<br>    a_ser = pd.DataFrame(&#123;<span class="hljs-string">&#x27;监测时间&#x27;</span>: year_month_day&#125;)<br>    a_ser.set_index(<span class="hljs-string">&#x27;监测时间&#x27;</span>, inplace=<span class="hljs-literal">True</span>)<br>    df = pd.concat([a_ser, ai_cod_mn], axis=<span class="hljs-number">0</span>, join=<span class="hljs-string">&quot;outer&quot;</span>)<br>    df = df.reset_index(drop=<span class="hljs-literal">False</span>)<br>    df[<span class="hljs-string">&#x27;监测时间&#x27;</span>] = pd.to_datetime(df[<span class="hljs-string">&#x27;监测时间&#x27;</span>])<br>    df1 = df.drop_duplicates(subset=<span class="hljs-string">&quot;监测时间&quot;</span>, keep=<span class="hljs-string">&quot;last&quot;</span>, ignore_index=<span class="hljs-literal">True</span>)<br>    df2 = df1.sort_values(by=<span class="hljs-string">&quot;监测时间&quot;</span>, ignore_index=<span class="hljs-literal">True</span>)<br>    df2[<span class="hljs-string">&quot;cod&quot;</span>] = df2[<span class="hljs-string">&quot;监测值&quot;</span>].interpolate()<br>    df2.drop(columns=<span class="hljs-string">&quot;监测值&quot;</span>, inplace=<span class="hljs-literal">True</span>)<br>    df2.set_index(<span class="hljs-string">&#x27;监测时间&#x27;</span>, inplace=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> df2<br></code></pre></td></tr></table></figure><p>主要是 将数据生成无空连续的逐小时 时间序列数据 插值方法为线性插值</p><h3 id="数据解读"><a href="#数据解读" class="headerlink" title="数据解读"></a>数据解读</h3><h4 id="查看acf"><a href="#查看acf" class="headerlink" title="查看acf"></a>查看acf</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">df2 = df2.dropna()<br><span class="hljs-comment"># 解决有nan的问题</span><br>plot_acf(df2,lags=<span class="hljs-number">50</span>).show()<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/681168/1658496966248-a9f853f2-55b2-4728-8ae7-83c26ec56dd7.png"></p><p>解读 拖尾为p 。基本大于0.5 现在和未来有很强的相关性</p><h4 id="单位根检验"><a href="#单位根检验" class="headerlink" title="单位根检验"></a>单位根检验</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;原始序列的ADF检验结果为：&#x27;</span>,ADF(df2.cod))<br></code></pre></td></tr></table></figure><p>原始序列的ADF检验结果为： (-7.19465930048855, 2.452407467867345e-10, 37, 9199, {‘1%’: -3.431061069214289, ‘5%’: -2.8618542472812902, ‘10%’: -2.5669372687639176}, 11281.50483165621)</p><p>解读：P值小于显著性水平α（0.05），不接受原假设（非平稳序列），说明原始序列是平稳序列。</p><h4 id="白噪声检验"><a href="#白噪声检验" class="headerlink" title="白噪声检验"></a>白噪声检验</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;一阶差分序列的白噪声检验结果为：&#x27;</span>,acorr_ljungbox(df2,lags=<span class="hljs-number">1</span>,return_df =<span class="hljs-built_in">bool</span>))<br></code></pre></td></tr></table></figure><p>一阶差分序列的白噪声检验结果为： lb_stat lb_pvalue 1 7467.631465 0.0</p><p>p值为0小于0.05，不是白噪声</p><p><strong>综上可以采用 arima 模型</strong></p><h4 id="定阶-人工识图"><a href="#定阶-人工识图" class="headerlink" title="定阶 人工识图"></a>定阶 人工识图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#一阶差分，我们不需要这么做，看下代码怎么写的。</span><br>df2_mn=df2.diff(periods=<span class="hljs-number">1</span>, axis=<span class="hljs-number">0</span>).dropna()<br><span class="hljs-comment">#自相关图</span><br>plot_acf(df2,lags=<span class="hljs-number">20</span>).show()<br><span class="hljs-comment">#解读：拖尾 有长期相关性 p 取1 </span><br><span class="hljs-comment">#偏自相关图 </span><br>plot_pacf(df2,lags=<span class="hljs-number">20</span>).show()<br><span class="hljs-comment">#偏自相关图</span><br>plot_pacf(df2,lags=<span class="hljs-number">50</span>).show()<br><span class="hljs-comment">#解读：自相关图，0阶拖尾；偏自相关图，截尾。则ARIMA(p,d,q)=ARIMA(1,0,n)</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/681168/1658497358538-342dc80a-d890-4386-bc8e-ca67ca811fef.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/681168/1658497368903-f3dccfbb-c6e0-4aa7-a86c-e78aab590f93.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/681168/1658497380496-184e826a-d4c3-40a3-aa69-f2413617af0a.png"></p><h4 id="参数调优"><a href="#参数调优" class="headerlink" title="参数调优"></a>参数调优</h4><p>AIC调优</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> statsmodels.tsa.arima.model <span class="hljs-keyword">import</span> ARIMA<br>aic_matrix=[]<br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    tmp=[]<br>    <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        <span class="hljs-keyword">try</span>:<br>            tmp.append(ARIMA(df2,order=(p,<span class="hljs-number">0</span>,q)).fit().aic)<br>        <span class="hljs-keyword">except</span>:<br>            tmp.append(<span class="hljs-literal">None</span>)<br>    aic_matrix.append(tmp)<br>aic_matrix<br><br><span class="hljs-comment"># p,q=aic_matrix.stack().idxmin() #最小值的索引</span><br><span class="hljs-comment"># 手动查找最小值 同样为1，0，4</span><br></code></pre></td></tr></table></figure><p>也可以用BIC调优 不再赘述</p><h3 id="模型建立"><a href="#模型建立" class="headerlink" title="模型建立"></a>模型建立</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">model = ARIMA(df2, order=(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>))<br>result_arima = model.fit()<br></code></pre></td></tr></table></figure><h3 id="模型预测"><a href="#模型预测" class="headerlink" title="模型预测"></a>模型预测</h3><p>定义画图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">pic1</span>(<span class="hljs-params">result_arima,df2</span>):<br>    t1 = <span class="hljs-string">&quot;2022/7/6 00:00:00&quot;</span><br>    t2 = <span class="hljs-string">&quot;2022/7/8 00:00:00&quot;</span><br>    predict_more=result_arima.predict(t1 ,t2 )<br>    t = pd.date_range(t1, t2 , freq=<span class="hljs-string">&quot;h&quot;</span>).strftime(<span class="hljs-string">&quot;%y%m%d%h%m%s&quot;</span>)<br>    new_ticks = pd.date_range(t1, t2 , freq=<span class="hljs-string">&quot;d&quot;</span>).strftime(<span class="hljs-string">&quot;%y%m%d%h%m%s&quot;</span>)<br>    axc.clear()<br>    axc.set_title(<span class="hljs-string">&quot;局部历史值与真实值对比&quot;</span>)<br>    axc.plot(t,df2[t1 :t2],linestyle = <span class="hljs-string">&quot;--&quot;</span>,alpha=<span class="hljs-number">0.5</span>)<br>    axc.plot(t,predict_more,linestyle = <span class="hljs-string">&quot;:&quot;</span>)<br>    axc.legend([<span class="hljs-string">&#x27;真实值&#x27;</span>,<span class="hljs-string">&#x27;预测值&#x27;</span>])<br>    axc.set_xticks(new_ticks)   <br><br>    <span class="hljs-comment"># 创建画布控件</span><br>    canvas = FigureCanvasTkAgg(fig1, master=root)  <span class="hljs-comment"># A tk.DrawingArea.</span><br>    canvas.draw()<br>    canvas.get_tk_widget().place(x=<span class="hljs-number">63</span>,y=<span class="hljs-number">200</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/681168/1658497922337-e1e6f543-0dbb-409b-ac68-05a72ef2423a.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fore_picture</span>(<span class="hljs-params">result_arima,df2</span>):<br>    df3 = df2.reset_index(drop=<span class="hljs-literal">False</span>)<br>    rows = df3.shape[<span class="hljs-number">0</span>]<br>    endtime = df3.iloc[rows - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br>    forecast = pd.Series(result_arima.forecast(<span class="hljs-number">48</span>), index=pd.date_range(endtime, periods=<span class="hljs-number">48</span>, freq=<span class="hljs-string">&#x27;H&#x27;</span>))<br>    df_last = df2.iloc[-<span class="hljs-number">48</span>:]    <br>    data = pd.concat((df_last, forecast), axis=<span class="hljs-number">0</span>)<br>    data.columns = [<span class="hljs-string">&#x27;监测值浓度&#x27;</span>, <span class="hljs-string">&#x27;未来48小时&#x27;</span>]<br>    axc2.clear()<br>    axc2.set_title(<span class="hljs-string">&quot;未来48小时预测&quot;</span>)<br>    axc2.plot(data) <br>    <br>        <span class="hljs-comment"># 创建画布控件</span><br>    canvas = FigureCanvasTkAgg(fig2, master=root)  <span class="hljs-comment"># A tk.DrawingArea.</span><br>    canvas.draw()<br>    canvas.get_tk_widget().place(x=<span class="hljs-number">600</span>,y=<span class="hljs-number">200</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/681168/1658497941233-d0387b16-c1dd-4ec5-a2a4-4162e3be9eec.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">compare2</span>(<span class="hljs-params">result_arima,df2</span>):<br>    df3 = df2.reset_index(drop=<span class="hljs-literal">False</span>)<br>    rows = df3.shape[<span class="hljs-number">0</span>]<br>    endtime = df3.iloc[rows - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br>    starttime = df3.iloc[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>    predict=result_arima.predict(starttime , endtime)<br>    axc3.clear()<br>    axc3.set_title(<span class="hljs-string">&quot;全部预测值真实值对比&quot;</span>)<br>    axc3.plot(df2.index,df2[<span class="hljs-string">&#x27;cod&#x27;</span>],linestyle = <span class="hljs-string">&quot;--&quot;</span>,alpha=<span class="hljs-number">0.5</span>)<br>    axc3.plot(df2.index,predict,linestyle = <span class="hljs-string">&quot;:&quot;</span>)<br>    axc3.legend([<span class="hljs-string">&#x27;真实值&#x27;</span>,<span class="hljs-string">&#x27;预测值&#x27;</span>])<br>    canvas = FigureCanvasTkAgg(fig3, master=root)  <span class="hljs-comment"># A tk.DrawingArea.</span><br>    canvas.draw()<br>    canvas.get_tk_widget().place(x=<span class="hljs-number">1200</span>,y=<span class="hljs-number">200</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/681168/1658497956069-1c995a76-08cb-44b0-a0b2-9173af977365.png"></p><h3 id="模型可视化及GUI初探"><a href="#模型可视化及GUI初探" class="headerlink" title="模型可视化及GUI初探"></a>模型可视化及GUI初探</h3><p>用Tkinter 实现自动选择站点及因子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 副本</span><br><span class="hljs-keyword">from</span> tkinter.ttk <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span>  tkinter <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> matplotlib<br>matplotlib.use(<span class="hljs-string">&#x27;TkAgg&#x27;</span>)<br><span class="hljs-keyword">from</span> matplotlib.backends.backend_tkagg <span class="hljs-keyword">import</span> FigureCanvasTkAgg<br><span class="hljs-keyword">from</span> matplotlib.figure <span class="hljs-keyword">import</span> Figure<br><br>root = Tk()<br>root.title(<span class="hljs-string">&quot;ARIMA预测模型&quot;</span>)<br>root.geometry(<span class="hljs-string">&quot;1800x900+50+50&quot;</span>)  <span class="hljs-comment"># 长x宽+x*y</span><br>           <br>lb1 = Label(root,text=<span class="hljs-string">&#x27;站点选择&#x27;</span>,fg=<span class="hljs-string">&#x27;black&#x27;</span>, font=(<span class="hljs-string">&#x27;微软雅黑&#x27;</span>,<span class="hljs-number">15</span>),  height=<span class="hljs-number">2</span>,  relief=FLAT)<br>lb2 = Label(root,text=<span class="hljs-string">&#x27;因子选择&#x27;</span>,fg=<span class="hljs-string">&#x27;black&#x27;</span>, font=(<span class="hljs-string">&#x27;微软雅黑&#x27;</span>,<span class="hljs-number">15</span>),  height=<span class="hljs-number">2</span>,  relief=FLAT)<br>lb3 = Label(root,text=<span class="hljs-string">&#x27;预测结果（48h）&#x27;</span>,fg=<span class="hljs-string">&#x27;black&#x27;</span>, font=(<span class="hljs-string">&#x27;微软雅黑&#x27;</span>,<span class="hljs-number">15</span>),  height=<span class="hljs-number">2</span>,  relief=FLAT)<br><span class="hljs-comment"># lb4 = Label(root,text=&#x27;历史预测对比&#x27;,fg=&#x27;black&#x27;, font=(&#x27;微软雅黑&#x27;,15),  height=2,  relief=FLAT)</span><br><br><span class="hljs-comment"># lb5 = Label(root,text=comb1.get(),fg=&#x27;black&#x27;, font=(&#x27;微软雅黑&#x27;,15),  height=2,  relief=FLAT)</span><br>lb1.place(x=<span class="hljs-number">63</span>,y=<span class="hljs-number">20</span>)<br>lb2.place(x=<span class="hljs-number">300</span>,y=<span class="hljs-number">20</span>)<br>lb3.place(x=<span class="hljs-number">63</span>,y=<span class="hljs-number">110</span>)<br><span class="hljs-comment"># lb4.place(x=510,y=110)</span><br><span class="hljs-comment"># lb5.place(x=820,y=110)</span><br>var1 = StringVar()<br>comb1= Combobox(root,textvariable=var1,values = site)<br>comb1.place(x=<span class="hljs-number">63</span>,y=<span class="hljs-number">80</span>)<br>var2 = StringVar()<br>comb2= Combobox(root,textvariable=var2,values=factor)<br>comb2.place(x=<span class="hljs-number">300</span>,y=<span class="hljs-number">80</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">select_device</span>(<span class="hljs-params">event</span>):<br>    s = comb1.get()<br>    <span class="hljs-built_in">print</span>(s)<br>    <span class="hljs-keyword">return</span> s<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">select_factor</span> (event):<br>    y = comb2.get()<br>    <span class="hljs-built_in">print</span>(y)<br>    <span class="hljs-keyword">return</span> y<br><br>comb1.bind(<span class="hljs-string">&quot;&lt;&lt;ComboboxSelected&gt;&gt;&quot;</span>, select_device)<br>comb2.bind(<span class="hljs-string">&quot;&lt;&lt;ComboboxSelected&gt;&gt;&quot;</span>, select_factor)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">click</span>(<span class="hljs-params">event</span>):<br>    s = comb1.get()<br>    y = comb2.get()<br>    df2 = nseri(s,y )<br>    model = ARIMA(df2, order=(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>))<br>    result_arima = model.fit()<br>    <br>    fig1 = Figure(figsize=(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>), dpi=<span class="hljs-number">120</span>)<br>    axc = fig1.add_subplot(<span class="hljs-number">111</span>)<br>    axc.clear()<br>    pic1(result_arima,df2)<br><br>    fig2 = Figure(figsize=(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>), dpi=<span class="hljs-number">120</span>)<br>    axc2 = fig2.add_subplot(<span class="hljs-number">111</span>)<br>    axc2.clear()<br>    fore_picture(result_arima,df2)<br><br>    fig3 = Figure(figsize=(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>), dpi=<span class="hljs-number">120</span>)<br>    axc3 = fig3.add_subplot(<span class="hljs-number">111</span>)<br>    axc3.clear()<br>    compare2(result_arima,df2)    <br>    <br><br>but1 = Button(root, text=<span class="hljs-string">&#x27;计算&#x27;</span>,font=(<span class="hljs-string">&#x27;微软雅黑&#x27;</span>,<span class="hljs-number">15</span>),  height=<span class="hljs-number">1</span>)<br>but1.place(x=<span class="hljs-number">300</span>,y=<span class="hljs-number">110</span>)  <br><br>but1.bind(<span class="hljs-string">&quot;&lt;Button-1&gt;&quot;</span>,click)<br><br>root.mainloop()<br></code></pre></td></tr></table></figure><p>结果预览<br><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405092131490.png" alt="111.png"></p><h3 id="模型评价"><a href="#模型评价" class="headerlink" title="模型评价"></a>模型评价</h3><p>模型评价方法： 浓度准确率， 等级准确率</p><p>浓度准确率</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/681168/1658498060055-471dd8e9-e287-4a75-b360-d508cdf45eea.png"></p><p>等级准确率：实测的类别与预测的类别相同时，则视为预测正确，预测正确的个数占预测的总个数的百分比，即为模型预测准确率。指标预测准确率的详细计算方法如下式：<img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405092145737.png" alt="image.png"></p><p>Pi为类别相对误差，T 为验证期内实测值的时间点数，t为实测值与预测值对应的时刻，pit为实测的类别与模拟的类别相比值，如果类别相同则为1，否则为0。</p><h3 id="结果提取"><a href="#结果提取" class="headerlink" title="结果提取"></a>结果提取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">format1</span>(<span class="hljs-params">df2</span>):<br>    df7=pd.Series()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">180</span>) :<br>        df3= df2[:-<span class="hljs-number">4</span>*(<span class="hljs-number">1</span>+i)]        <br>        model = ARIMA(df3, order=(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>))<br>        result_arima1 = model.fit()<br>        df4 = df3.reset_index(drop=<span class="hljs-literal">False</span>)<br>        rows = df4.shape[<span class="hljs-number">0</span>]<br>        endtime = df4.iloc[rows - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br>        forecast = pd.Series(result_arima1.forecast(<span class="hljs-number">5</span>), index=pd.date_range(endtime, periods=<span class="hljs-number">5</span>, freq=<span class="hljs-string">&#x27;H&#x27;</span>))<br>        df8 = forecast.tail(<span class="hljs-number">1</span>)    <br>        df7 = pd.concat((df7,df8),axis=<span class="hljs-number">0</span>,join=<span class="hljs-string">&#x27;inner&#x27;</span>)<br>    <span class="hljs-keyword">return</span> df7 <br>f2 =format1(df2)<br>f2.to_excel(<span class="hljs-string">&quot;forceful.xls&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>时间原因用的excel 分析</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/681168/1658498412727-7339ba7d-dbd3-407b-ac06-2261972c967d.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/681168/1658498435576-efb265aa-9f0e-452f-84fa-e70509215452.png"></p><p>对比了6月21日~2022&#x2F;7&#x2F;15 高指真实值与预测值的结果，浓度预测准确率为84.61%，等级准确率40.74%，等级准确率偏低的原因为实际监测结果在6附近波动，为Ⅲ类水质标准。<br>预测对比时间窗口存在降雨，实际结果有一定波动，浓度预测准确率能到达84.6%，有一定的推广价值。</p><h3 id="ARIMA-summary-解读"><a href="#ARIMA-summary-解读" class="headerlink" title="ARIMA .summary() 解读"></a>ARIMA .summary() 解读</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/681168/1670242073687-2d564dde-6f19-4ae7-9283-b3341ec7dae9.png"></p><ol><li>左上 为模型基本信息，Dep. Variable（需要预测的变量）、Model（模型及其参数）、Date、Time、Sample（样本数据）、No. Observations（观测数据的数量）</li><li>右上 Log Likelihood（对数似然函数）标识最适合采样数据的分布。虽然它很有用，但AIC和BIC会惩罚模型的复杂性，这有助于使我们的ARIMA模型变得简洁。赤池的信息准则（AIC）有助于确定线性回归模型的强度。AIC 会惩罚添加参数的模型，因为添加更多参数将始终增加最大似然值。贝叶斯信息准则（BIC）与 AIC 一样，BIC 也会惩罚模型的复杂性，但它也包含数据中的行数。Hannan-Quinn信息标准（HQIC），与AIC和BIC一样是模型选择的另一个标准；但是它在实践中并不常用。AIC 、BIC 越小越好</li><li>中部 确保模型中的每个项在统计意义上是否显著。若p值大于0.05，则项不显著。</li><li>下部：Ljung-Box（modified Box-Pierce test）测试错误是白噪音 Ljung-Box (L1) (Q) 为Lag1的LBQ检验统计量，其Prob(Q)为 0.01，p值为0.94。由于p值高于0.05，因此我们不能拒绝零假设（误差是白噪音）</li></ol><h3 id="讨论与总结"><a href="#讨论与总结" class="headerlink" title="讨论与总结"></a>讨论与总结</h3><ol><li>ARIMA 模型在高锰酸盐指数上的预测效果超过80%,经过初步研究，适用于水质在线站点。</li><li>模型可用于单站点单因子预测，不需要其他参数，约束小，预测精度高。</li><li>模型对波动剧烈的因子，预测效果不好，不适用于所有因子，所有站点。</li><li>对于新的数据集需要做平稳性检验，白噪声检验。</li><li>需要采用数据人工识图+自动的方式实现定阶，选择最优的 p，d，q。</li><li>可以继续在 ARIMAX（多元时间序列模型）等方面深入研究。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在excel中使用python 快速作图示例</title>
    <link href="/2024/05/19/%E5%9C%A8excel%E4%B8%AD%E4%BD%BF%E7%94%A8python%20%E5%BF%AB%E9%80%9F%E4%BD%9C%E5%9B%BE%E7%A4%BA%E4%BE%8B/"/>
    <url>/2024/05/19/%E5%9C%A8excel%E4%B8%AD%E4%BD%BF%E7%94%A8python%20%E5%BF%AB%E9%80%9F%E4%BD%9C%E5%9B%BE%E7%A4%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Excel 中可以使用 python 算是一个旧闻了，是 python 之父 Guido van Rossum 加入微软的重要产品。刚出来的第一时间我也尝鲜了，最近作图的时候，再次使用了这个功能，感觉非常方便，推荐大家也用一下。<br><strong>优点：</strong></p><ol><li>Python 在云端运行，无需部署环境。</li><li>可以编写脚本来自动化日常的 Excel 任务，如数据整理、图表生成等，提高工作效率。</li><li>快速响应，可视化选择数据，调整原始数据方便，所见即所得，比 jupyter notebook 更丝滑。<br><strong>缺点：</strong><br>云端运行的 python，对网速要求高，不方便加载除了标准库以外的第三方库。<br>好的，那我们就以日常工作中水质折线图为例，探究下 Excel 中使用 python 的魅力。<br><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405170912976.png" alt="在excel中使用python.png"></li></ol><h2 id="基础条件"><a href="#基础条件" class="headerlink" title="基础条件"></a>基础条件</h2><p>支持 python 的 excel 版本。我是用的是 office 365。<br><em>Excel 中的 Python 目前为预览版，可能会根据反馈进行更改。若要使用此功能，请加入 <a href="https://insider.microsoft365.com/join/windows">Microsoft 365 会员计划</a>，并选择“<strong>Beta 版频道</strong>”预览体验成员级别。</em><br>Excel 中的 Python 包括 anaconda 提供的一些标准 Python 库，用于提高数据分析和数据可视化能力。包括 Matplotlib、NumPy、Pandas、Seaborn、Statsmodels 等。<br><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405161838543.png" alt="image.png"></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>一组在线水质检测数据，包括水质站点监测值和监测时间。<br><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405161843018.png" alt="image.png"></p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>一、选择一个空单元格，点击公式-插入 python<br><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405161845518.png" alt="image.png"></p><p>二、数据结构预览<br>单元格输入以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">df=xl(<span class="hljs-string">&quot;A1:G98&quot;</span>, headers=<span class="hljs-literal">True</span>)<br>df[<span class="hljs-string">&#x27;监测时间&#x27;</span>] = pd.to_datetime(df[<span class="hljs-string">&#x27;监测时间&#x27;</span>])<br><span class="hljs-comment"># 确保时间列是索引</span><br>df.set_index(<span class="hljs-string">&#x27;监测时间&#x27;</span>, inplace=<span class="hljs-literal">True</span>)<br>df.describe()<br></code></pre></td></tr></table></figure><p>按快捷键 crtl+enter 得到数据集结果。<br><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405161847142.png" alt="image.png"><br>仔细看下 excel 界面:<br>1 为代码输入区，可以调整宽度，自带代码高亮和代码提示。<br>2 为选择输出类型切换，包括值和 python 对象。<br>3 为结果展示区域，包括图片或者其他信息，图片的话需要调整单元格宽度。<br>4 为诊断信息，就像 python 的命令结果窗口，会给出成功或者报错信息。<br>可以说是一个简单的 IDE，五脏俱全。<br><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405161853316.png" alt="image.png"><br>三、绘图<br>选择一个较大的区域，最好是合并单元格，点击公式-插入 python。<br>单元格输入以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-comment"># 解决坐标轴刻度负号乱码</span><br>plt.rcParams[<span class="hljs-string">&quot;font.sans-serif&quot;</span>] = [<span class="hljs-string">&quot;Simhei&quot;</span>]  <br>plt.rcParams[<span class="hljs-string">&quot;axes.unicode_minus&quot;</span>] = <span class="hljs-literal">False</span><br><span class="hljs-comment"># 将监测时间列转换为datetime类型</span><br>df=xl(<span class="hljs-string">&quot;A1:G98&quot;</span>, headers=<span class="hljs-literal">True</span>)<br>df[<span class="hljs-string">&#x27;监测时间&#x27;</span>] = pd.to_datetime(df[<span class="hljs-string">&#x27;监测时间&#x27;</span>])<br><span class="hljs-comment"># 确保时间列是索引</span><br>df.set_index(<span class="hljs-string">&#x27;监测时间&#x27;</span>, inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 使用matplotlib绘制折线图</span><br>plt.figure(figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">7</span>))  <span class="hljs-comment"># 设置图表大小</span><br><span class="hljs-keyword">for</span> column <span class="hljs-keyword">in</span> df.columns:<br>    plt.plot(df.index, df[column], label=column)  <span class="hljs-comment"># 绘制每列的折线图</span><br><span class="hljs-comment"># 添加标准值线（值为6），蓝色虚线</span><br>plt.axhline(<span class="hljs-number">6</span>, color=<span class="hljs-string">&#x27;blue&#x27;</span>, linestyle=<span class="hljs-string">&#x27;--&#x27;</span>, label=<span class="hljs-string">&#x27;标准值&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;5月各站点高锰酸盐指数变化趋势图&#x27;</span>)  <span class="hljs-comment"># 设置图表标题</span><br><span class="hljs-comment"># plt.xlabel(&#x27;监测时间&#x27;)  # 设置x轴标签</span><br>plt.ylabel(<span class="hljs-string">&#x27;监测值：mg/L&#x27;</span>)  <span class="hljs-comment"># 设置y轴标签</span><br>plt.xticks(rotation=<span class="hljs-number">0</span>)  <br>plt.tight_layout()  <span class="hljs-comment"># 自动调整子图参数，使之填充整个图像区域</span><br><span class="hljs-comment"># 修改图例位置</span><br>plt.legend(loc=<span class="hljs-string">&#x27;lower left&#x27;</span>, bbox_to_anchor=(<span class="hljs-number">0</span>, -<span class="hljs-number">0.15</span>), ncol=<span class="hljs-built_in">len</span>(df.columns), frameon=<span class="hljs-literal">False</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>结果如下：<br><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202405161903435.png" alt="image.png"><br>利用 python 的 matplotlib 库绘图，就是这么丝滑。如果下次需要再次绘图，那么就不需要重复设置了，直接修改数据就好了。发现数据存在异常，修改异常值也是快速更新结果，非常方便。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>这只是 excel 中使用 python 的一个小小示例，相信它能做的还有更多。有点担心 vba 的地位了。<br>最后，如果这篇文章有帮助到你，记得点赞，关注哦。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>知道做到 读书笔记</title>
    <link href="/2024/05/19/%E7%9F%A5%E9%81%93%E5%81%9A%E5%88%B0%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/05/19/%E7%9F%A5%E9%81%93%E5%81%9A%E5%88%B0%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>[[知道做到：跃迁式学习]]</p><h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><blockquote><p>[!abstract] 知道做到：跃迁式学习</p><ul><li><img src="https://cdn.weread.qq.com/weread/cover/54/3300017554/t7_3300017554.jpg" alt=" 知道做到：跃迁式学习|200"></li><li>书名： 知道做到：跃迁式学习</li><li>作者： 彼得•霍林斯</li><li>简介： 学习是改善你的生活环境、成为你想成为的人的关键。科学的方法能加速学习进程，让你事半功倍。技能、信息和能力永远不会突然降临，需要你自己去寻找它们，这本书将手把手教你如何以效的方式做到这一点：清晰明了的学习思路，切实可行的学习建议，让你更聪明地学习，而不是更努力地学习。在本书中你将学习到：a.学习的理论和原则以及我们做错了什么；b.你的期望比你的才能更重要；c.如何制定计划，战略性地解构和分析信息、技能；d.如何在少工作的同时获得更好的结果；e.如何利用身边人和环境制造惊人的结果；f.自我练习、调整和纠正的艺术；g.如何积累你的技能，使其成为独一无二的资源。一本书带你快速训练大脑、发展肌肉记忆，了解潜在的心理学和生物学。</li><li>出版时间 </li><li>ISBN： 9787504689542</li><li>分类： 经济理财-管理</li><li>出版社： </li><li>PC 地址： <a href="https://weread.qq.com/web/reader/37032360813ab6d5bg014fdd">https://weread.qq.com/web/reader/37032360813ab6d5bg014fdd</a></li></ul></blockquote><h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>这是一本讲如何学习的书，不厚，很多老生常谈的东西，但对我有用就是好书。<br>读的过程中，我认真梳理了关于如何学习的知识，特意做了学习风格测试（所罗门-费尔德学习方式和偏好指数法）和 16 型人格测试（MBTI 测试），让我更了解自己的优缺点。人是可以改变的，所以我希望通过学习学习方法，提高自己。希望过几年测试我的状态更好。</p><h2 id="学习需要思考的内容"><a href="#学习需要思考的内容" class="headerlink" title="学习需要思考的内容"></a>学习需要思考的内容</h2><ol><li>做这件事对我有什么价值</li><li>做这件事要花费什么成本<ol><li>时间成本</li><li>金钱</li><li>投入产出比</li></ol></li><li>你想在这个领域达到怎样的效果</li><li>你有哪些可以依赖的外部资源<ol><li>[[如何利用环境]]</li><li>你没有的资源是否可以创造和争取</li></ol></li><li>你是否有这方面的天赋（一般以上）</li><li>当前的生活状态是否支持你做这项工作</li></ol><h2 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h2><p>再次之前我做了 2 个测试学习风格测试（所罗门-费尔德学习方式和偏好指数法）和 16 型人格测试（MBTI 测试）。我的学习风格偏好 VEPS（视觉、活跃、综合、感觉），人格为表演者-ESFP，荣格认知功能偏好为：主导功能：外倾感觉，辅助功能：内倾情感，第三功能：外倾思考，劣势功能：内倾直觉。测试结果基本符合我的状态，更倾向于外倾感觉，做事流于表面，并不深究。这对我的成长来说并不是好事，因为我也不可能真的成为一个表演者或者销售。因此我要在现有优势的基础上，不断提高自己的理性思考能力。</p><p>以下学习方法主要从书中总结，学习方法远不止于下面这些，以后会不断增加学习方法。我本人是认可费曼学习法的。</p><h3 id="学习金字塔"><a href="#学习金字塔" class="headerlink" title="学习金字塔"></a>学习金字塔</h3><p>学习金字塔理论，由美国学者、著名的学习专家爱德加·戴尔（Edgar Dale）在 1946 年提出，是一种现代学习方式的理论。该理论通过数字形式形象显示了采用不同的学习方式，学习者在两周以后还能记住内容（平均学习保持率）的多少。学习金字塔模型的核心思想在于强调不同学习活动对信息保留效率的影响，并提倡更加互动和主动的学习方法来提高学习效率和记忆持久度。这个模型通过一个逐级展示不同学习方法效果的形象金字塔，揭示了从被动接收到主动参与的学习方式对增强记忆保持的重要性。</p><p>听讲 5%<br>阅读 10%<br>视听 20%<br>演示 30%<br>讨论 50%<br>实践 75%<br>教授给他人 90%</p><p><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202404121601505.png" alt="image.png"></p><h4 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h4><p>实际可能并没有那么绝对，应该是多重方法结合，知识教授他人更难，你必须掌握才能教，所以留存更长，另外一个就是坚持，反复练习。</p><h2 id="费曼学习法"><a href="#费曼学习法" class="headerlink" title="费曼学习法"></a><font color="#245bdb">费曼学习法</font></h2><p><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202404121708139.png" alt="image.png"></p><p>1. 选择学习目标与概念理解（Concept）<br>2. 回顾与知识梳理（Review）<br>    回顾所学内容，尝试在没有参考资料的情况下，用自己的语言和理解重新阐述该概念。<br>3. 简化与知识重构（Simplify）<br>4. 交给他人（tech）</p><h2 id="布鲁姆分类法"><a href="#布鲁姆分类法" class="headerlink" title="布鲁姆分类法"></a>布鲁姆分类法</h2><p><img src="https://gitee.com/chenwenmao/picbed/raw/master/img/202404121720005.png" alt="image.png"><br>类似于费曼。</p><h2 id="学习的四个具体操作方式"><a href="#学习的四个具体操作方式" class="headerlink" title="学习的四个具体操作方式"></a>学习的四个具体操作方式</h2><h3 id="刻意练习"><a href="#刻意练习" class="headerlink" title="刻意练习"></a>刻意练习</h3><p><strong>专注力决定信息吸收率</strong><br>刻意练习关键在于认真、<strong>专注</strong>、<strong>耐心</strong>，学习慢一点，再慢一点。<br>反复练习而不用心，也没有用，<strong>熟悉不等于掌握</strong><br>学习时，不要被既有经验束缚，以为了解就不深入学习<br>这也适用于健身</p><h4 id="真正的掌握需要不停的练习"><a href="#真正的掌握需要不停的练习" class="headerlink" title="真正的掌握需要不停的练习"></a>真正的掌握需要不停的练习</h4><p>制定 [[每日时刻表]]<br>利用零散的时间进行练习<br>番茄工作法</p><h3 id="交替练习"><a href="#交替练习" class="headerlink" title="交替练习"></a>交替练习</h3><p>将相近的知识交替学习，但要避免打断思考</p><h3 id="间隔重复"><a href="#间隔重复" class="headerlink" title="间隔重复"></a>间隔重复</h3><p>周期学习就像健身一样，每天固定时间点学习</p><h3 id="问题导向式学习法"><a href="#问题导向式学习法" class="headerlink" title="问题导向式学习法"></a>问题导向式学习法</h3><p>问题导向式学习法（Problem-based Learning，简称 PBL）<br>以解题的思路学习，可以是做项目，或者做应用题，然后向上追溯知识点<br>具体步骤：</p><ol><li>明确你的问题。</li><li>明确你已知的信息。</li><li>明确你需要但未知的内容，以及获得这些信息的途径</li><li>列出可行的解决方案，并选择成功几率最大的解决方案。</li><li>将方案<strong>分解</strong>为一个个行动（列出具体的时间计划通常很有用）。</li></ol><h2 id="学习心态调整"><a href="#学习心态调整" class="headerlink" title="学习心态调整"></a>学习心态调整</h2><h3 id="合理自我定位"><a href="#合理自我定位" class="headerlink" title="合理自我定位"></a>合理自我定位</h3><p>认识学习并不是一件简单的事，需要精心设定目标，制定计划。<br><strong>所有的半途而废，都是因为心态错位</strong><br>要乐观，但不要过于乐观<br>战略上藐视敌人，战术上重视敌人<br>饱和式打击，不作无准备之仗<br><strong>保持谦逊</strong>，stay hungry stay foolish<br>养成一个习惯需要 66 天，学习一个技能至少要 25-30 小时</p><h3 id="好奇心"><a href="#好奇心" class="headerlink" title="好奇心"></a>好奇心</h3><p>好奇心不是学习的充分条件，但是可以作为发起学习和自律力耗尽的时候拉你一把。</p><h3 id="提高困惑忍耐力"><a href="#提高困惑忍耐力" class="headerlink" title="提高困惑忍耐力"></a>提高困惑忍耐力</h3><p>当你学习越深入，不知道的越多，要提高困惑忍耐力。试着抽离出来，用全局观，或者短时间沉浸在局部利益，或者调动自己的好奇心，或者给自己打气，或者借助于朋友的宽慰，及时走出困惑沮丧的心境，重新开始学习，切记不要因此放弃当前的学习。这是你突破瓶颈的方法。</p><h2 id="深入学习的方法"><a href="#深入学习的方法" class="headerlink" title="深入学习的方法"></a>深入学习的方法</h2><h3 id="精细提问"><a href="#精细提问" class="headerlink" title="精细提问"></a>精细提问</h3><p>也可以用于讨论<br>六要素提问：who、what、where、when、why、how</p><h2 id="如何利用环境"><a href="#如何利用环境" class="headerlink" title="如何利用环境"></a>如何利用环境</h2><p>我作为一个外倾感觉型的人，非常容易受到环境的影响。<br><strong>与其挑战天性，不如利用环境最高级的自律，是让环境帮你做出正确决策</strong><br>主要是两个方面社会环境和个人环境（大环境和小环境）</p><h3 id="个体环境"><a href="#个体环境" class="headerlink" title="个体环境"></a>个体环境</h3><p>五官感受到的环境，屋子是否整齐，资料夹是否按顺序摆放等等。<br>第一，把资源放在触手可及的地方。<br>第二，把干扰因素关进另一个房间。<br>启动耗能&#x2F;活化能<br>对于较难的工作，即使切换到工作状态都耗费极大的精力。<br>主动抵御沉迷分心事物的冲动，把注意力转移到需要学习或实践的任务上。<br>《心流》（Flow）认为，这种改变环境的方法其实是改变了特定活动的“活化能”。<br>一般来说，对于心生向往的事情，你要降低活化能；对于讨厌的事情，你则要增加活化能。<br>启动学习和练习所需的活化能越少越好。<br>这本书很难做到，我目前也没有到达，只有坚持练习，希望能更丝滑的切换到工作和学习。</p><h3 id="社会环境"><a href="#社会环境" class="headerlink" title="社会环境"></a>社会环境</h3><p>朋友、社会关系<br>积极向上的氛围，相互鼓励的环境。<br>消除不良的氛围，原理刻意贬低和质疑你的人。<br>榜样的力量，向榜样学习<br>向优秀的人和群体靠拢</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/05/19/hello-world/"/>
    <url>/2024/05/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
